import React, { useState } from 'react';
import { View, Image, TouchableOpacity, Text } from 'react-native';
import styles from './styles';
import Signature from 'react-native-signature-canvas';
import RNHTMLtoPDF from 'react-native-html-to-pdf';
import RNPrint from 'react-native-print';
import Share from 'react-native-share';

const CreateSignature = () => {
  const [sign, setSign] = useState(null);

  const handleOK = signature => {
    console.log('sginature');
    setSign(signature);
  };

  const handleEmpty = () => {
    console.log('Empty');
    setSign(null);
  };

  const handleClear = () => {
    console.log('clear success!');
    setSign(null);
  };

  const createPDF = async () => {
    try {
      console.log('sign', sign);
      let options_ = {
        html: `
        <div style={{padding: '20px', }}>
        <h3 style=" text-align: center; ">This report generated by mobile. Any manual correction will void it.</h3>
          <img src=${sign} style={{width: "100px", height: '100px', display: 'inline-block'}}
          alt="Red dot" />
        </div>
        `,
        fileName: 'mySignture',
      };
      let file = await RNHTMLtoPDF.convert(options_);
      // await RNPrint.print({ filePath: file.filePath })
      ////////////// Share Code //////////////
      let options = {
        title: 'Hi From Title',
        message: "This is my report",
        // social: social,
        // url: `data:file/pdf;base64,${results.base64}`,
        url: "file:///" + file.filePath,
        filename: 'khalifa'
      }
      await Share.open(options)
      console.log('file', file);
    } catch (err) {
      console.log('err', err);
    }
  };

  return (
    <View style={styles().container}>
      {sign ? (
        <View style={styles.preview}>
          <Image
            resizeMode={'contain'}
            style={styles().image}
            source={{ uri: sign }}
          />
        </View>
      ) : null}
      <Signature
        onOK={handleOK}
        onEmpty={handleEmpty}
        onClear={handleClear}
        descriptionText="Signature"
        clearText="Clear"
        confirmText="Save"
      />
      {sign && (
        <TouchableOpacity
          onPress={() => createPDF()}
          style={styles().convertWrapper}>
          <Text style={styles().convertText}>Convert PDF</Text>
        </TouchableOpacity>
      )}
    </View>
  );
};

export default CreateSignature;
